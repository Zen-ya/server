// controllers/song.controller.ts
import { Request, Response } from "express";
import { Song } from "../types/song.type";
import Db from "./SongDB";

// Récupérer toutes les chansons
export async function getAllSongs(req: Request, res: Response) {
  try {
    const songs: Song[] | undefined = await Db.getSongs();
    if (!songs) {
      return res.status(404).json({ message: "No songs found" });
    }
    res.status(200).json(songs);
  } catch (error) {
    console.error('Error fetching songs:', error);
    res.status(500).json({ message: "Internal Server Error", error });
  }
}

// Récupérer une chanson par ID
export async function getSongById(req: Request, res: Response) {
  try {
    const songId = parseInt(req.params.id);
    const song = await Db.getSongById(songId);
    if (!song) {
      return res.status(404).json({ message: "Song not found" });
    }
    res.status(200).json(song);
  } catch (error) {
    console.error('Error fetching song:', error);
    res.status(500).json({ message: "Internal Server Error", error });
  }
}

// Ajouter une nouvelle chanson
export async function addSong(req: Request, res: Response) {
  try {
    const { SongName, Artist, LinkSong, SongTypeID } = req.body;
    if (!SongName || !Artist || !LinkSong || SongTypeID === undefined) {
      return res.status(400).json({ message: "All fields must be provided" });
    }
    console.log(SongName, Artist, LinkSong);
    const song: Song = {
      SongID: "0", // Placeholder, should be auto-generated by the database
      SongName,
      Artist,
      LinkSong,
      SongTypeID,
    };

    await Db.createSong(song);
    res.status(201).json({ message: "Song created successfully" });
  } catch (error) {
    console.error('Error creating song:', error);
    res.status(500).json({ message: "Internal Server Error", error });
  }
}

// Mettre à jour une chanson
export async function updateSong(req: Request, res: Response) {
  try {
    const { SongID, SongName, Artist, LinkSong, SongTypeID } = req.body;
    if (SongID === undefined || !SongName || !Artist || !LinkSong || SongTypeID === undefined) {
      return res.status(400).json({ message: "All fields must be provided" });
    }

    const song: Song = {
      SongID,
      SongName,
      Artist,
      LinkSong,
      SongTypeID,
    };

    await Db.updateSong(song);
    res.status(200).json({ message: "Song updated successfully" });
  } catch (error) {
    console.error('Error updating song:', error);
    res.status(500).json({ message: "Internal Server Error", error });
  }
}

// Supprimer une chanson
export async function deleteSong(req: Request, res: Response) {
  const songId = parseInt(req.params.id);
  if (!songId) {
    return res.status(400).json({ message: 'Song ID is required' });
  }

  try {
    const result = await Db.deleteSong(songId);
    if (!result) {
      return res.status(404).json({ message: 'Song not found' });
    }
    res.status(200).json({ message: 'Song deleted successfully' });
  } catch (error) {
    console.error('Error deleting song:', error);
    res.status(500).json({ message: "Internal Server Error", error });
  }
}
